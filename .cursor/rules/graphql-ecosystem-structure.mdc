---
description: 
globs: 
alwaysApply: false
---
# GraphQL Ecosystem Structure

The project includes a comprehensive GraphQL ecosystem with several interconnected packages for schema definition, code generation, and client implementation.

## GraphQL Schema Package

- **[packages/graphql-schema/](mdc:packages/graphql-schema)**: Core GraphQL schema definitions
  - **Schema Definition Files**: GraphQL SDL files (.graphql) defining types, queries, mutations, and subscriptions
  - **Custom Scalars**: Definitions for custom scalar types
  - **Directives**: Custom directive implementations

## GraphQL Schema Code Generation

- **[packages/graphql-schema-codegen/](mdc:packages/graphql-schema-codegen)**: Code generation from GraphQL schema
  - **Templates**: Code generation templates
  - **Config**: Configuration for different output formats
  - **Scripts**: Generation scripts for various targets

## GraphQL Client Implementation

- **[packages/graphql-client/](mdc:packages/graphql-client)**: GraphQL client implementation
  - **Client Core**: Base client implementation
  - **Fetchers**: Network layer implementations
  - **Cache**: Local caching strategies
  - **Authentication**: Authentication integration
  - **Error Handling**: Standardized error handling

## GraphQL Client Code Generation

- **[packages/graphql-client-codegen/](mdc:packages/graphql-client-codegen)**: Client code generation
  - **Operation Parsing**: Logic to parse GraphQL operations
  - **TypeScript Generation**: Generation of TypeScript types from operations
  - **Hook Generation**: React hook generation for queries and mutations

## Subgraph for Blockchain Data

- **[packages/subgraph/](mdc:packages/subgraph)**: Blockchain data indexing
  - **Manifest**: Subgraph manifest configuration
  - **Mappings**: TypeScript mappings for blockchain events
  - **Schema**: GraphQL schema for indexed data
  - **Deployment**: Deployment configuration

## GraphQL Planning

- **[graphql-plan/](mdc:graphql-plan)**: Planning and design documents
  - **Schema Design**: Schema design documents
  - **Architecture**: GraphQL architecture decisions
  - **API Design**: API design guidelines

## Integration Points

- **Schema → Schema Codegen**: Schema files are used to generate server-side code
- **Schema → Client Codegen**: Schema is referenced to validate client operations
- **Client ← Client Codegen**: Generated code is used by the client implementation
- **Subgraph → GraphQL API**: Subgraph data is exposed through the GraphQL API

## Development Guidelines

- Maintain a schema-first approach to API design
- Use fragments for reusable query parts
- Follow naming conventions consistently
- Consider performance implications of complex queries
- Implement proper error handling and validation
- Document schema types and fields thoroughly
