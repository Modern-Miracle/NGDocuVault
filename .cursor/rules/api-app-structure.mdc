---
description: 
globs: 
alwaysApply: false
---
# API Application Structure

The backend API application is a TypeScript-based server that provides data services for frontend applications.

## Core Structure

- **[apps/api/src/](mdc:apps/api/src)**: Main source code directory
  - **[apps/api/src/controllers/](mdc:apps/api/src/controllers)**: Request handlers that process incoming HTTP requests
  - **[apps/api/src/services/](mdc:apps/api/src/services)**: Business logic implementation
  - **[apps/api/src/models/](mdc:apps/api/src/models)**: Data models and database schema definitions
  - **[apps/api/src/routes/](mdc:apps/api/src/routes)**: API route definitions and endpoint mapping
  - **[apps/api/src/middleware/](mdc:apps/api/src/middleware)**: Request processing middleware (auth, validation, etc.)
  - **[apps/api/src/config/](mdc:apps/api/src/config)**: Application configuration settings
  - **[apps/api/src/utils/](mdc:apps/api/src/utils)**: Utility functions and helper methods

- **[apps/api/__tests__/](mdc:apps/api/__tests__)**: Test files for the API functionality
- **[apps/api/docs/](mdc:apps/api/docs)**: API documentation
- **[apps/api/restclient/](mdc:apps/api/restclient)**: REST client request examples for testing

## Configuration Files

- **[apps/api/package.json](mdc:apps/api/package.json)**: Package dependencies and scripts
- **[apps/api/tsconfig.json](mdc:apps/api/tsconfig.json)**: TypeScript configuration
- **[apps/api/jest.config.js](mdc:apps/api/jest.config.js)**: Jest testing configuration
- **[apps/api/docker-compose.yml](mdc:apps/api/docker-compose.yml)**: Docker configuration for containerization

## Key Features

- RESTful API endpoints for data operations
- Authentication and authorization middleware
- Structured error handling
- Request validation
- Database integration
- Logging system
- Docker containerization support

## Development Guidelines

- Follow RESTful API design principles
- Implement proper error handling and validation
- Write comprehensive tests for API endpoints
- Document API endpoints and data models
- Maintain separation of concerns (routes, controllers, services, models)
- Use TypeScript for static type checking throughout the codebase
