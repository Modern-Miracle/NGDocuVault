/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "DidAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidAuth__factory>;
    getContractFactory(
      name: "DidIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidIssuer__factory>;
    getContractFactory(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidRegistry__factory>;
    getContractFactory(
      name: "DidVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DidVerifier__factory>;
    getContractFactory(
      name: "DocuVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DocuVault__factory>;
    getContractFactory(
      name: "IZKPVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZKPVerifier__factory>;
    getContractFactory(
      name: "MockIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockIssuer__factory>;
    getContractFactory(
      name: "VerifierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierFactory__factory>;
    getContractFactory(
      name: "AgeVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AgeVerifier__factory>;
    getContractFactory(
      name: "FhirVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FhirVerifier__factory>;
    getContractFactory(
      name: "HashVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashVerifier__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "DidAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidAuth>;
    getContractAt(
      name: "DidIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidIssuer>;
    getContractAt(
      name: "DidRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidRegistry>;
    getContractAt(
      name: "DidVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DidVerifier>;
    getContractAt(
      name: "DocuVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DocuVault>;
    getContractAt(
      name: "IZKPVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZKPVerifier>;
    getContractAt(
      name: "MockIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockIssuer>;
    getContractAt(
      name: "VerifierFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierFactory>;
    getContractAt(
      name: "AgeVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AgeVerifier>;
    getContractAt(
      name: "FhirVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FhirVerifier>;
    getContractAt(
      name: "HashVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HashVerifier>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "DidAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAuth>;
    deployContract(
      name: "DidIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidIssuer>;
    deployContract(
      name: "DidRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidRegistry>;
    deployContract(
      name: "DidVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidVerifier>;
    deployContract(
      name: "DocuVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DocuVault>;
    deployContract(
      name: "IZKPVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZKPVerifier>;
    deployContract(
      name: "MockIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockIssuer>;
    deployContract(
      name: "VerifierFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerifierFactory>;
    deployContract(
      name: "AgeVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AgeVerifier>;
    deployContract(
      name: "FhirVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FhirVerifier>;
    deployContract(
      name: "HashVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashVerifier>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "DidAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidAuth>;
    deployContract(
      name: "DidIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidIssuer>;
    deployContract(
      name: "DidRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidRegistry>;
    deployContract(
      name: "DidVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DidVerifier>;
    deployContract(
      name: "DocuVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DocuVault>;
    deployContract(
      name: "IZKPVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZKPVerifier>;
    deployContract(
      name: "MockIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockIssuer>;
    deployContract(
      name: "VerifierFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VerifierFactory>;
    deployContract(
      name: "AgeVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AgeVerifier>;
    deployContract(
      name: "FhirVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FhirVerifier>;
    deployContract(
      name: "HashVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HashVerifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
