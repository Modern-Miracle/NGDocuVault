/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockIssuer, MockIssuerInterface } from "../MockIssuer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_issuer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "documentHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DocumentIssued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "documentHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "issuer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DocumentRevoked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "documents",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "documentHash",
        type: "bytes32",
      },
    ],
    name: "getDocument",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "documentHash",
        type: "bytes32",
      },
    ],
    name: "issueDocument",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "issuer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "documentHash",
        type: "bytes32",
      },
    ],
    name: "revokeDocument",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f6102bd38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600180546001600160a01b03191691909117905560405161022d90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081631d1438481461017b575080632b2805db1461014f5780635796e127146100f3578063952be80d146100975763b10d6b411461005957600080fd5b346100935760203660031901126100935760809060018060a01b036001541690805191600435835260208301523390820152426060820152f35b5080fd5b5034610093576020366003190112610093576001546001600160a01b0316906100c13383146101a0565b519042825233917f32fff957e0d249cd6b2b3d08dfff62a27095e3b9bfe0cd8e71d3befa54e6d1c7602060043592a480f35b5034610093576020366003190112610093576001546001600160a01b03169061011d3383146101a0565b519042825233917f859b2ee4aa3f837da49d874e7bed14c957765ad6b62bcbb8ce60f64f606bfabb602060043592a480f35b50346100935760203660031901126100935760ff81602093600435815280855220541690519015158152f35b8390346100935781600319360112610093576001546001600160a01b03168152602090f35b156101a757565b60405162461bcd60e51b815260206004820152602260248201527f4f6e6c79206973737565722063616e2063616c6c20746869732066756e63746960448201526137b760f11b6064820152608490fdfea26469706673582212208782b3ae80aaa6eccb6379c0d2c64f15d65a4e7ee096e21cc8ee86b8cdbb449764736f6c63430008140033";

type MockIssuerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockIssuerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockIssuer__factory extends ContractFactory {
  constructor(...args: MockIssuerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _issuer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_issuer, overrides || {});
  }
  override deploy(
    _issuer: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_issuer, overrides || {}) as Promise<
      MockIssuer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockIssuer__factory {
    return super.connect(runner) as MockIssuer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockIssuerInterface {
    return new Interface(_abi) as MockIssuerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockIssuer {
    return new Contract(address, _abi, runner) as unknown as MockIssuer;
  }
}
