/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DocuVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "activateIssuer"
      | "addAdmin"
      | "addVerifier"
      | "deactivateIssuer"
      | "didAuth"
      | "documents"
      | "generateDocumentId"
      | "getConsentStatus"
      | "getDocumentInfo"
      | "getDocuments"
      | "getRoleAdmin"
      | "giveConsent"
      | "grantRole"
      | "hasRole"
      | "isDocumentExpired"
      | "isIssuerActive"
      | "owner"
      | "pause"
      | "paused"
      | "registerDocument"
      | "registerDocuments"
      | "registerIssuer"
      | "registerUser"
      | "removeAdmin"
      | "removeUser"
      | "removeVerifier"
      | "renounceOwnership"
      | "renounceRole"
      | "requestShare"
      | "requestVerification"
      | "revokeConsent"
      | "revokeRole"
      | "shareDocument"
      | "shareRequests"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "updateDocument"
      | "verifyCid"
      | "verifyDocument"
      | "verifyDocuments"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminRegistered"
      | "ConsentGranted"
      | "ConsentRevoked"
      | "DocumentBatchVerified"
      | "DocumentRegistered"
      | "DocumentShared"
      | "DocumentUpdated"
      | "DocumentVerified"
      | "IssuerActivated"
      | "IssuerDeactivated"
      | "IssuerRegistered"
      | "OwnershipTransferred"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "ShareRequested"
      | "Unpaused"
      | "UserRegistered"
      | "VerificationRequested"
      | "VerifierAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "didAuth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "documents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateDocumentId",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsentStatus",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocuments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "giveConsent",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDocumentExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuerActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDocument",
    values: [
      BytesLike,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDocuments",
    values: [
      BytesLike[],
      string[],
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestShare",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestVerification",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConsent",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareDocument",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareRequests",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDocument",
    values: [BytesLike, BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCid",
    values: [BytesLike, AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDocuments",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "documents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateDocumentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDocumentExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIssuerActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyCid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDocuments",
    data: BytesLike
  ): Result;
}

export namespace AdminRegisteredEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentGrantedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    requester: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    requester: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    requester: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentRevokedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    requester: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    requester: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    requester: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentBatchVerifiedEvent {
  export type InputTuple = [
    documentIds: BytesLike[],
    count: BigNumberish,
    verifier: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentIds: string[],
    count: bigint,
    verifier: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentIds: string[];
    count: bigint;
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentRegisteredEvent {
  export type InputTuple = [
    documentId: BytesLike,
    issuer: AddressLike,
    holder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    issuer: string,
    holder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    issuer: string;
    holder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentSharedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    holder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    holder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    holder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentUpdatedEvent {
  export type InputTuple = [
    oldDocumentId: BytesLike,
    newDocumentId: BytesLike,
    issuer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldDocumentId: string,
    newDocumentId: string,
    issuer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldDocumentId: string;
    newDocumentId: string;
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentVerifiedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    verifier: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    verifier: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerActivatedEvent {
  export type InputTuple = [issuer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [issuer: string, timestamp: bigint];
  export interface OutputObject {
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerDeactivatedEvent {
  export type InputTuple = [issuer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [issuer: string, timestamp: bigint];
  export interface OutputObject {
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerRegisteredEvent {
  export type InputTuple = [issuer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [issuer: string, timestamp: bigint];
  export interface OutputObject {
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShareRequestedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    requester: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    requester: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    requester: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [
    role: BytesLike,
    did: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [role: string, did: string, timestamp: bigint];
  export interface OutputObject {
    role: string;
    did: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRequestedEvent {
  export type InputTuple = [
    documentId: BytesLike,
    holder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentId: string,
    holder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentId: string;
    holder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAddedEvent {
  export type InputTuple = [verifier: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [verifier: string, timestamp: bigint];
  export interface OutputObject {
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DocuVault extends BaseContract {
  contractName: "DocuVault";

  connect(runner?: ContractRunner | null): DocuVault;
  waitForDeployment(): Promise<this>;

  interface: DocuVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  activateIssuer: TypedContractMethod<
    [issuerAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  addAdmin: TypedContractMethod<[adminAddr: AddressLike], [void], "nonpayable">;

  addVerifier: TypedContractMethod<
    [verifierAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  deactivateIssuer: TypedContractMethod<
    [issuerAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  didAuth: TypedContractMethod<[], [string], "view">;

  documents: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, boolean, bigint, string] & {
        issuer: string;
        holder: string;
        issuanceDate: bigint;
        expirationDate: bigint;
        isVerified: boolean;
        documentType: bigint;
        cid: string;
      }
    ],
    "view"
  >;

  generateDocumentId: TypedContractMethod<
    [contentHash: BytesLike, holder: AddressLike, cid: string],
    [string],
    "view"
  >;

  getConsentStatus: TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [[bigint, bigint] & { consentStatus: bigint; validUntil: bigint }],
    "view"
  >;

  getDocumentInfo: TypedContractMethod<
    [documentId: BytesLike],
    [
      [boolean, boolean, string, string, bigint, bigint, bigint, string] & {
        isVerified: boolean;
        isExpired: boolean;
        issuer: string;
        holder: string;
        issuanceDate: bigint;
        expirationDate: bigint;
        documentType: bigint;
        cid: string;
      }
    ],
    "view"
  >;

  getDocuments: TypedContractMethod<[holder: AddressLike], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  giveConsent: TypedContractMethod<
    [
      documentId: BytesLike,
      requester: AddressLike,
      consent: BigNumberish,
      validUntil: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isDocumentExpired: TypedContractMethod<
    [documentId: BytesLike],
    [boolean],
    "view"
  >;

  isIssuerActive: TypedContractMethod<
    [issuerAddr: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerDocument: TypedContractMethod<
    [
      contentHash: BytesLike,
      cid: string,
      holder: AddressLike,
      issuanceDate: BigNumberish,
      expirationDate: BigNumberish,
      documentType: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  registerDocuments: TypedContractMethod<
    [
      contentHashes: BytesLike[],
      cids: string[],
      holders: AddressLike[],
      issuanceDates: BigNumberish[],
      expirationDates: BigNumberish[],
      documentTypes: BigNumberish[]
    ],
    [string[]],
    "nonpayable"
  >;

  registerIssuer: TypedContractMethod<
    [issuerAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  registerUser: TypedContractMethod<[], [void], "nonpayable">;

  removeAdmin: TypedContractMethod<
    [adminAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  removeUser: TypedContractMethod<[], [void], "nonpayable">;

  removeVerifier: TypedContractMethod<
    [verifierAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestShare: TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;

  requestVerification: TypedContractMethod<
    [documentId: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeConsent: TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  shareDocument: TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [
      [string, string, bigint, bigint, bigint] & {
        issuer: string;
        holder: string;
        issuanceDate: bigint;
        expirationDate: bigint;
        documentType: bigint;
      }
    ],
    "nonpayable"
  >;

  shareRequests: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [[bigint, bigint] & { consent: bigint; validUntil: bigint }],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDocument: TypedContractMethod<
    [
      oldDocumentId: BytesLike,
      contentHash: BytesLike,
      cid: string,
      expirationDate: BigNumberish,
      documentType: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  verifyCid: TypedContractMethod<
    [
      contentHash: BytesLike,
      holder: AddressLike,
      cid: string,
      documentId: BytesLike
    ],
    [boolean],
    "view"
  >;

  verifyDocument: TypedContractMethod<
    [documentId: BytesLike],
    [void],
    "nonpayable"
  >;

  verifyDocuments: TypedContractMethod<
    [documentIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateIssuer"
  ): TypedContractMethod<[issuerAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[adminAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<[verifierAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateIssuer"
  ): TypedContractMethod<[issuerAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "didAuth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "documents"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, boolean, bigint, string] & {
        issuer: string;
        holder: string;
        issuanceDate: bigint;
        expirationDate: bigint;
        isVerified: boolean;
        documentType: bigint;
        cid: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateDocumentId"
  ): TypedContractMethod<
    [contentHash: BytesLike, holder: AddressLike, cid: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConsentStatus"
  ): TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [[bigint, bigint] & { consentStatus: bigint; validUntil: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDocumentInfo"
  ): TypedContractMethod<
    [documentId: BytesLike],
    [
      [boolean, boolean, string, string, bigint, bigint, bigint, string] & {
        isVerified: boolean;
        isExpired: boolean;
        issuer: string;
        holder: string;
        issuanceDate: bigint;
        expirationDate: bigint;
        documentType: bigint;
        cid: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDocuments"
  ): TypedContractMethod<[holder: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "giveConsent"
  ): TypedContractMethod<
    [
      documentId: BytesLike,
      requester: AddressLike,
      consent: BigNumberish,
      validUntil: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDocumentExpired"
  ): TypedContractMethod<[documentId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isIssuerActive"
  ): TypedContractMethod<[issuerAddr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerDocument"
  ): TypedContractMethod<
    [
      contentHash: BytesLike,
      cid: string,
      holder: AddressLike,
      issuanceDate: BigNumberish,
      expirationDate: BigNumberish,
      documentType: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDocuments"
  ): TypedContractMethod<
    [
      contentHashes: BytesLike[],
      cids: string[],
      holders: AddressLike[],
      issuanceDates: BigNumberish[],
      expirationDates: BigNumberish[],
      documentTypes: BigNumberish[]
    ],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerIssuer"
  ): TypedContractMethod<[issuerAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[adminAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifierAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestShare"
  ): TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestVerification"
  ): TypedContractMethod<[documentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeConsent"
  ): TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareDocument"
  ): TypedContractMethod<
    [documentId: BytesLike, requester: AddressLike],
    [
      [string, string, bigint, bigint, bigint] & {
        issuer: string;
        holder: string;
        issuanceDate: bigint;
        expirationDate: bigint;
        documentType: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareRequests"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [[bigint, bigint] & { consent: bigint; validUntil: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDocument"
  ): TypedContractMethod<
    [
      oldDocumentId: BytesLike,
      contentHash: BytesLike,
      cid: string,
      expirationDate: BigNumberish,
      documentType: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyCid"
  ): TypedContractMethod<
    [
      contentHash: BytesLike,
      holder: AddressLike,
      cid: string,
      documentId: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyDocument"
  ): TypedContractMethod<[documentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyDocuments"
  ): TypedContractMethod<[documentIds: BytesLike[]], [void], "nonpayable">;

  getEvent(
    key: "AdminRegistered"
  ): TypedContractEvent<
    AdminRegisteredEvent.InputTuple,
    AdminRegisteredEvent.OutputTuple,
    AdminRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ConsentGranted"
  ): TypedContractEvent<
    ConsentGrantedEvent.InputTuple,
    ConsentGrantedEvent.OutputTuple,
    ConsentGrantedEvent.OutputObject
  >;
  getEvent(
    key: "ConsentRevoked"
  ): TypedContractEvent<
    ConsentRevokedEvent.InputTuple,
    ConsentRevokedEvent.OutputTuple,
    ConsentRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentBatchVerified"
  ): TypedContractEvent<
    DocumentBatchVerifiedEvent.InputTuple,
    DocumentBatchVerifiedEvent.OutputTuple,
    DocumentBatchVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentRegistered"
  ): TypedContractEvent<
    DocumentRegisteredEvent.InputTuple,
    DocumentRegisteredEvent.OutputTuple,
    DocumentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DocumentShared"
  ): TypedContractEvent<
    DocumentSharedEvent.InputTuple,
    DocumentSharedEvent.OutputTuple,
    DocumentSharedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentUpdated"
  ): TypedContractEvent<
    DocumentUpdatedEvent.InputTuple,
    DocumentUpdatedEvent.OutputTuple,
    DocumentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentVerified"
  ): TypedContractEvent<
    DocumentVerifiedEvent.InputTuple,
    DocumentVerifiedEvent.OutputTuple,
    DocumentVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerActivated"
  ): TypedContractEvent<
    IssuerActivatedEvent.InputTuple,
    IssuerActivatedEvent.OutputTuple,
    IssuerActivatedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerDeactivated"
  ): TypedContractEvent<
    IssuerDeactivatedEvent.InputTuple,
    IssuerDeactivatedEvent.OutputTuple,
    IssuerDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerRegistered"
  ): TypedContractEvent<
    IssuerRegisteredEvent.InputTuple,
    IssuerRegisteredEvent.OutputTuple,
    IssuerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ShareRequested"
  ): TypedContractEvent<
    ShareRequestedEvent.InputTuple,
    ShareRequestedEvent.OutputTuple,
    ShareRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRequested"
  ): TypedContractEvent<
    VerificationRequestedEvent.InputTuple,
    VerificationRequestedEvent.OutputTuple,
    VerificationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAdded"
  ): TypedContractEvent<
    VerifierAddedEvent.InputTuple,
    VerifierAddedEvent.OutputTuple,
    VerifierAddedEvent.OutputObject
  >;

  filters: {
    "AdminRegistered(address,uint256)": TypedContractEvent<
      AdminRegisteredEvent.InputTuple,
      AdminRegisteredEvent.OutputTuple,
      AdminRegisteredEvent.OutputObject
    >;
    AdminRegistered: TypedContractEvent<
      AdminRegisteredEvent.InputTuple,
      AdminRegisteredEvent.OutputTuple,
      AdminRegisteredEvent.OutputObject
    >;

    "ConsentGranted(bytes32,address,uint256)": TypedContractEvent<
      ConsentGrantedEvent.InputTuple,
      ConsentGrantedEvent.OutputTuple,
      ConsentGrantedEvent.OutputObject
    >;
    ConsentGranted: TypedContractEvent<
      ConsentGrantedEvent.InputTuple,
      ConsentGrantedEvent.OutputTuple,
      ConsentGrantedEvent.OutputObject
    >;

    "ConsentRevoked(bytes32,address,uint256)": TypedContractEvent<
      ConsentRevokedEvent.InputTuple,
      ConsentRevokedEvent.OutputTuple,
      ConsentRevokedEvent.OutputObject
    >;
    ConsentRevoked: TypedContractEvent<
      ConsentRevokedEvent.InputTuple,
      ConsentRevokedEvent.OutputTuple,
      ConsentRevokedEvent.OutputObject
    >;

    "DocumentBatchVerified(bytes32[],uint256,address,uint256)": TypedContractEvent<
      DocumentBatchVerifiedEvent.InputTuple,
      DocumentBatchVerifiedEvent.OutputTuple,
      DocumentBatchVerifiedEvent.OutputObject
    >;
    DocumentBatchVerified: TypedContractEvent<
      DocumentBatchVerifiedEvent.InputTuple,
      DocumentBatchVerifiedEvent.OutputTuple,
      DocumentBatchVerifiedEvent.OutputObject
    >;

    "DocumentRegistered(bytes32,address,address,uint256)": TypedContractEvent<
      DocumentRegisteredEvent.InputTuple,
      DocumentRegisteredEvent.OutputTuple,
      DocumentRegisteredEvent.OutputObject
    >;
    DocumentRegistered: TypedContractEvent<
      DocumentRegisteredEvent.InputTuple,
      DocumentRegisteredEvent.OutputTuple,
      DocumentRegisteredEvent.OutputObject
    >;

    "DocumentShared(bytes32,address,uint256)": TypedContractEvent<
      DocumentSharedEvent.InputTuple,
      DocumentSharedEvent.OutputTuple,
      DocumentSharedEvent.OutputObject
    >;
    DocumentShared: TypedContractEvent<
      DocumentSharedEvent.InputTuple,
      DocumentSharedEvent.OutputTuple,
      DocumentSharedEvent.OutputObject
    >;

    "DocumentUpdated(bytes32,bytes32,address,uint256)": TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;
    DocumentUpdated: TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;

    "DocumentVerified(bytes32,address,uint256)": TypedContractEvent<
      DocumentVerifiedEvent.InputTuple,
      DocumentVerifiedEvent.OutputTuple,
      DocumentVerifiedEvent.OutputObject
    >;
    DocumentVerified: TypedContractEvent<
      DocumentVerifiedEvent.InputTuple,
      DocumentVerifiedEvent.OutputTuple,
      DocumentVerifiedEvent.OutputObject
    >;

    "IssuerActivated(address,uint256)": TypedContractEvent<
      IssuerActivatedEvent.InputTuple,
      IssuerActivatedEvent.OutputTuple,
      IssuerActivatedEvent.OutputObject
    >;
    IssuerActivated: TypedContractEvent<
      IssuerActivatedEvent.InputTuple,
      IssuerActivatedEvent.OutputTuple,
      IssuerActivatedEvent.OutputObject
    >;

    "IssuerDeactivated(address,uint256)": TypedContractEvent<
      IssuerDeactivatedEvent.InputTuple,
      IssuerDeactivatedEvent.OutputTuple,
      IssuerDeactivatedEvent.OutputObject
    >;
    IssuerDeactivated: TypedContractEvent<
      IssuerDeactivatedEvent.InputTuple,
      IssuerDeactivatedEvent.OutputTuple,
      IssuerDeactivatedEvent.OutputObject
    >;

    "IssuerRegistered(address,uint256)": TypedContractEvent<
      IssuerRegisteredEvent.InputTuple,
      IssuerRegisteredEvent.OutputTuple,
      IssuerRegisteredEvent.OutputObject
    >;
    IssuerRegistered: TypedContractEvent<
      IssuerRegisteredEvent.InputTuple,
      IssuerRegisteredEvent.OutputTuple,
      IssuerRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "ShareRequested(bytes32,address,uint256)": TypedContractEvent<
      ShareRequestedEvent.InputTuple,
      ShareRequestedEvent.OutputTuple,
      ShareRequestedEvent.OutputObject
    >;
    ShareRequested: TypedContractEvent<
      ShareRequestedEvent.InputTuple,
      ShareRequestedEvent.OutputTuple,
      ShareRequestedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UserRegistered(bytes32,string,uint256)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "VerificationRequested(bytes32,address,uint256)": TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
    VerificationRequested: TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;

    "VerifierAdded(address,uint256)": TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
    VerifierAdded: TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
  };
}
