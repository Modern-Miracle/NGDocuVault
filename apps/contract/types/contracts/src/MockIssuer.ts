/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MockIssuerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "documents"
      | "getDocument"
      | "issueDocument"
      | "issuer"
      | "revokeDocument"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DocumentIssued" | "DocumentRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "documents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeDocument",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "documents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeDocument",
    data: BytesLike
  ): Result;
}

export namespace DocumentIssuedEvent {
  export type InputTuple = [
    documentHash: BytesLike,
    issuer: AddressLike,
    holder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentHash: string,
    issuer: string,
    holder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentHash: string;
    issuer: string;
    holder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentRevokedEvent {
  export type InputTuple = [
    documentHash: BytesLike,
    issuer: AddressLike,
    holder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    documentHash: string,
    issuer: string,
    holder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    documentHash: string;
    issuer: string;
    holder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockIssuer extends BaseContract {
  contractName: "MockIssuer";

  connect(runner?: ContractRunner | null): MockIssuer;
  waitForDeployment(): Promise<this>;

  interface: MockIssuerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  documents: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getDocument: TypedContractMethod<
    [documentHash: BytesLike],
    [[string, string, string, bigint]],
    "view"
  >;

  issueDocument: TypedContractMethod<
    [documentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  issuer: TypedContractMethod<[], [string], "view">;

  revokeDocument: TypedContractMethod<
    [documentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "documents"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<
    [documentHash: BytesLike],
    [[string, string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueDocument"
  ): TypedContractMethod<[documentHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeDocument"
  ): TypedContractMethod<[documentHash: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "DocumentIssued"
  ): TypedContractEvent<
    DocumentIssuedEvent.InputTuple,
    DocumentIssuedEvent.OutputTuple,
    DocumentIssuedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentRevoked"
  ): TypedContractEvent<
    DocumentRevokedEvent.InputTuple,
    DocumentRevokedEvent.OutputTuple,
    DocumentRevokedEvent.OutputObject
  >;

  filters: {
    "DocumentIssued(bytes32,address,address,uint256)": TypedContractEvent<
      DocumentIssuedEvent.InputTuple,
      DocumentIssuedEvent.OutputTuple,
      DocumentIssuedEvent.OutputObject
    >;
    DocumentIssued: TypedContractEvent<
      DocumentIssuedEvent.InputTuple,
      DocumentIssuedEvent.OutputTuple,
      DocumentIssuedEvent.OutputObject
    >;

    "DocumentRevoked(bytes32,address,address,uint256)": TypedContractEvent<
      DocumentRevokedEvent.InputTuple,
      DocumentRevokedEvent.OutputTuple,
      DocumentRevokedEvent.OutputObject
    >;
    DocumentRevoked: TypedContractEvent<
      DocumentRevokedEvent.InputTuple,
      DocumentRevokedEvent.OutputTuple,
      DocumentRevokedEvent.OutputObject
    >;
  };
}
